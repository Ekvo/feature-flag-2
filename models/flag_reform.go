// Code generated by gopkg.in/reform.v1. DO NOT EDIT.

package models

import (
	"fmt"
	"strings"

	"gopkg.in/reform.v1"
	"gopkg.in/reform.v1/parse"
)

type flagTableType struct {
	s parse.StructInfo
	z []interface{}
}

// Schema returns a schema name in SQL database ("public").
func (v *flagTableType) Schema() string {
	return v.s.SQLSchema
}

// Name returns a view or table name in SQL database ("flags").
func (v *flagTableType) Name() string {
	return v.s.SQLName
}

// Columns returns a new slice of column names for that view or table in SQL database.
func (v *flagTableType) Columns() []string {
	return []string{
		"flag_name",
		"is_deleted",
		"is_enabled",
		"active_from",
		"data",
		"default_data",
		"created_by",
		"created_at",
		"updated_at",
	}
}

// NewStruct makes a new struct for that view or table.
func (v *flagTableType) NewStruct() reform.Struct {
	return new(Flag)
}

// NewRecord makes a new record for that table.
func (v *flagTableType) NewRecord() reform.Record {
	return new(Flag)
}

// PKColumnIndex returns an index of primary key column for that table in SQL database.
func (v *flagTableType) PKColumnIndex() uint {
	return uint(v.s.PKFieldIndex)
}

// FlagTable represents flags view or table in SQL database.
var FlagTable = &flagTableType{
	s: parse.StructInfo{
		Type:      "Flag",
		SQLSchema: "public",
		SQLName:   "flags",
		Fields: []parse.FieldInfo{
			{Name: "FlagName", Type: "string", Column: "flag_name"},
			{Name: "IsDeleted", Type: "bool", Column: "is_deleted"},
			{Name: "IsEnabled", Type: "bool", Column: "is_enabled"},
			{Name: "ActiveFrom", Type: "time.Time", Column: "active_from"},
			{Name: "Data", Type: "JSONmap", Column: "data"},
			{Name: "DefaultData", Type: "JSONmap", Column: "default_data"},
			{Name: "CreatedBy", Type: "uuid.UUID", Column: "created_by"},
			{Name: "CreatedAt", Type: "time.Time", Column: "created_at"},
			{Name: "UpdatedAt", Type: "time.Time", Column: "updated_at"},
		},
		PKFieldIndex: 0,
	},
	z: new(Flag).Values(),
}

// String returns a string representation of this struct or record.
func (s Flag) String() string {
	res := make([]string, 9)
	res[0] = "FlagName: " + reform.Inspect(s.FlagName, true)
	res[1] = "IsDeleted: " + reform.Inspect(s.IsDeleted, true)
	res[2] = "IsEnabled: " + reform.Inspect(s.IsEnabled, true)
	res[3] = "ActiveFrom: " + reform.Inspect(s.ActiveFrom, true)
	res[4] = "Data: " + reform.Inspect(s.Data, true)
	res[5] = "DefaultData: " + reform.Inspect(s.DefaultData, true)
	res[6] = "CreatedBy: " + reform.Inspect(s.CreatedBy, true)
	res[7] = "CreatedAt: " + reform.Inspect(s.CreatedAt, true)
	res[8] = "UpdatedAt: " + reform.Inspect(s.UpdatedAt, true)
	return strings.Join(res, ", ")
}

// Values returns a slice of struct or record field values.
// Returned interface{} values are never untyped nils.
func (s *Flag) Values() []interface{} {
	return []interface{}{
		s.FlagName,
		s.IsDeleted,
		s.IsEnabled,
		s.ActiveFrom,
		s.Data,
		s.DefaultData,
		s.CreatedBy,
		s.CreatedAt,
		s.UpdatedAt,
	}
}

// Pointers returns a slice of pointers to struct or record fields.
// Returned interface{} values are never untyped nils.
func (s *Flag) Pointers() []interface{} {
	return []interface{}{
		&s.FlagName,
		&s.IsDeleted,
		&s.IsEnabled,
		&s.ActiveFrom,
		&s.Data,
		&s.DefaultData,
		&s.CreatedBy,
		&s.CreatedAt,
		&s.UpdatedAt,
	}
}

// View returns View object for that struct.
func (s *Flag) View() reform.View {
	return FlagTable
}

// Table returns Table object for that record.
func (s *Flag) Table() reform.Table {
	return FlagTable
}

// PKValue returns a value of primary key for that record.
// Returned interface{} value is never untyped nil.
func (s *Flag) PKValue() interface{} {
	return s.FlagName
}

// PKPointer returns a pointer to primary key field for that record.
// Returned interface{} value is never untyped nil.
func (s *Flag) PKPointer() interface{} {
	return &s.FlagName
}

// HasPK returns true if record has non-zero primary key set, false otherwise.
func (s *Flag) HasPK() bool {
	return s.FlagName != FlagTable.z[FlagTable.s.PKFieldIndex]
}

// SetPK sets record primary key, if possible.
//
// Deprecated: prefer direct field assignment where possible: s.FlagName = pk.
func (s *Flag) SetPK(pk interface{}) {
	reform.SetPK(s, pk)
}

// check interfaces
var (
	_ reform.View   = FlagTable
	_ reform.Struct = (*Flag)(nil)
	_ reform.Table  = FlagTable
	_ reform.Record = (*Flag)(nil)
	_ fmt.Stringer  = (*Flag)(nil)
)

func init() {
	parse.AssertUpToDate(&FlagTable.s, new(Flag))
}
